// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

//interface referente ao padrão de tokens ERC-20
interface IERC20{
    //Funções
    function totalSupply() external view returns (uint256);
    function balanceOF(address account) external view returns (uint256);
    function allowance( address owner , address spender)external view returns (uint256);
    function transfer (address recipient , uint256 amount)external  returns (bool);
    function approve(address spender , uint256 amount) external returns(bool);
    function transferFrom(address sender ,address recipient , uint256 amount ) external returns (bool);
    
    //Eventos
    event Transfer(address indexed from ,address indexed to , uint256 value) ;
    event Aproval(address indexed owner, address indexed spender , uint256);


    }
//Contrato
contract DioCoin is IERC20{
    //variaveis
    string public constant name = "Dio Coin";
    string public constant symbol = "dio";
    uint8 public constant decimals = 18;

    mapping(address => uint256) balances ; 
    mapping(address => mapping(address => uint256)) allowed;

    uint256 totalSupply_ = 10 ether;

    //construtor
    constructor(){
        balances[msg.sender] = totalSupply_;
    }

    //funções
    function totalSupply() public override  view  returns(uint256){
        return totalSupply_;
    }

    function balanceOF(address tokenOwner) public override  view returns(uint256){
        return balances[tokenOwner];

    }

    function transfer(address receiver , uint256 numTokens) public override returns(bool){
        require(numTokens <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender]- numTokens;
        balances[receiver] = balances[receiver] + numTokens;
        emit Transfer(msg.sender, receiver, numTokens);
        return true;
    }
    function approve(address delegate , uint256 numTokens) public override returns(bool){
        allowed[msg.sender][delegate] = numTokens;
        emit Aproval(msg.sender , delegate, numTokens);
        return true;
    }
    function allowance(address owner , address delegate)public override  view returns(uint){
        return allowed[owner][delegate];
    }
    function transferFrom(address owner , address buyer , uint256 numTokens)public override  returns(bool){
        require(numTokens <= balances[owner]);
        require(numTokens <= allowed[owner][msg.sender]);

        balances[owner] = balances[owner] - numTokens;
        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;
        balances[buyer] = balances[buyer] + numTokens;
        emit Transfer(owner, buyer, numTokens);
        return true;
    }

}
